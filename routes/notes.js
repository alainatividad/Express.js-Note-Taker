const express = require("express");
const notes = express.Router();
// use uuid to handle the creation of the unique id for each notes
const { v4: uuidv4 } = require("uuid");
// use helper fsUtils that is available on previous class activities
const {
  readFromFile,
  readAndAppend,
  deleteIdFromFile,
} = require("../helpers/fsUtils");

// GET Route for retrieving all the notes
notes.get("/", (req, res) => {
  // when user goes to /api/notes the application loads all available notes and displays it on the left of the page
  readFromFile("./db/db.json").then((data) => res.json(JSON.parse(data)));
});

// // GET Route for a specific note
// notes.get("/:note_id", (req, res) => {
//   const noteId = req.params.note_id;
//   readFromFile("./db/db.json")
//     .then((data) => JSON.parse(data))
//     .then((json) => {
//       //
//       const result = json.filter((note) => note.id === noteId);
//       return result.length > 0
//         ? res.json(result)
//         : res.json(`No note with ID ${noteId}`);
//     });
// });

// POST Route for a new note
notes.post("/", (req, res) => {
  if (req.body) {
    const { title, text } = req.body;
    // make sure that there are values in both title and text
    if (title && text) {
      // put the destructured req.body and id generated by uuidv4 in an object called newnote
      const newNote = {
        title,
        text,
        id: uuidv4(),
      };

      readAndAppend(newNote, "./db/db.json");
      res.json(`Note added successfully`);
    }
  } else {
    res.error("Error in adding note");
  }
});

// DELETE Route for a specific note
notes.delete("/:note_id", (req, res) => {
  const noteId = req.params.note_id;
  // Added a function in fsUtils.js to delete a specific Id from the given JSON file
  if (noteId) {
    deleteIdFromFile(noteId, "./db/db.json");
    res.json("Note successfully deleted");
  }
});

module.exports = notes;
